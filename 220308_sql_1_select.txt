1. 북 테이블에서 price가 10000이상인 bookname을 출력하라.

SELECT bookname
FROM book
WHERE price >= 10000;

2. 북 테이블에서 price가 10000~20000사이인 bookname을 출력하시오.

SELECT bookname
FROM book
WHERE price >= 10000 AND price <= 20000;

SELECT bookname
FROM book
WHERE price BETWEEN 10000 AND 20000;

3. 북 테이블에서 bookname이 '축구'로 시작하는 모든 자료를 출력하라.

SELECT *
FROM book
WHERE bookname LIKE '축구%';

4. 북 테이블에서 bookname이 '이야기'로 끝나는 모든 자료를 출력하라.

SELECT *
FROM book
WHERE bookname LIKE '%이야기';

5. 북 테이블에서 bookname이 '축구'로 시작하거나 '이야기'로 끝나는 모든 자료를 출력하라.

SELECT *
FROM book
WHERE bookname LIKE '축구%' OR bookname LIKE '%이야기';

6. 북 테이블에서 publisher이 '대한미디어'이거나 '굿스포츠'인 모든 자료를 출력하라.

SELECT *
FROM book
WHERE publisher LIKE '대한미디어' OR publisher LIKE '굿스포츠';
(이 경우 LIKE 대신 = 으로 써도 된다.)

SELECT *
FROM book
WHERE publisher IN ('대한미디어', '굿스포츠');

7. 북 테이블에서 publisher이 '대한미디어'가 아니고 '굿스포츠'도 아닌 모든 자료를 출력하라.

SELECT *
FROM book
WHERE publisher <> '대한미디어' AND publisher <> '굿스포츠';

8. 북 테이블에서 bookid = 11, bookname = '동계 올림픽', publisher = 생략, price = 12000인 자료를 삽입하시오.

INSERT INTO book(bookid, bookname, price)
VALUES(11, '동계 올림픽', 12000);

8. 북 테이블에서 publisher가 NULL인 모든 자료를 출력하라.

SELECT *
FROM book
WHERE publisher IS NULL;
(NULL이 아닌걸 찾을 땐 NOT NULL)

9. 북 테이블에서 publisher가 '대한미디어'인 자료를 출력하시오.

SELECT publisher
FROM book
WHERE publisher = '대한미디어';

10. 북 테이블에서 publisher가 '대한미디어'인 자료를 중복되지 않게 출력하시오.

SELECT DISTINCT publisher
FROM book
WHERE publisher = '대한미디어';

11. 북 테이블의 모든 자료를 '일련번호', '제목', '출판사', '가격'으로 변경하여 출력하시오.

SELECT bookid AS '일련번호', bookname AS '제목', publisher AS '출판사', price AS '가격'
FROM book;

12. 북 테이블의 모든 자료를 '일련번호', '제목', '출판사', '가격'으로 변경하고 가격이 12000이상인 자료만 출력하시오.

SELECT bookid AS '일련번호', bookname AS '제목', publisher AS '출판사', price AS '가격'
FROM book
WHERE 가격>=12000;
(안됨)

13. 북 테이블에서 대한미디어의 가격 합계를 출력하시오.

SELECT publisher AS '출판사', SUM(price) AS '가격합계'
FROM book
WHERE publisher = '대한미디어';

14. 북 테이블에서 '대한미디어'의 거래건수를 출력하시오.

SELECT publisher AS '출판사', COUNT(price) AS '거래건수'
FROM book
WHERE publisher = '대한미디어';

15. 북 테이블에서 판매가의 합계, 평균, 최대, 최소, 갯수를 출력.

SELECT SUM(price) AS '합계',
       AVG(price) AS '평균',
       MAX(price) AS '최대값',
       MIN(price) AS '최소값',
       COUNT(price) AS '갯수'
FROM book;

16. 북 테이블에서 각각의 publisher별 가격 합계를 출력하시오.

SELECT publisher AS '출판사', SUM(price) AS '가격합계'
FROM book
GROUP BY publisher;

SELECT publisher AS '출판사',COUNT(publisher) AS '거래건수', SUM(price) AS '가격합계'
FROM book
GROUP BY publisher;

17. ORDER 테이블에서 '주문번호', '구매자번호', '책번호', ''구입가격', '구입일자'을 출력하시오.

SELECT orderid AS '주문번호', custid AS '구매자번호', bookid AS '책번호', saleprice AS '구입가격', orderdate AS '구입일자'
FROM orders;

18. ORDER 테이블에서 '구매자번호', , '구입가격'의 합계, '구입일자'을 출력하시오.
단, '구매자번호'별로 구하시오.

SELECT custid AS '구매자번호', SUM(saleprice) AS '구입가격의 합계'
FROM orders
GROUP BY custid;

18. ORDER 테이블에서 '구매자번호', , '구입가격'의 합계, '구입일자'을 출력하시오.
단, '구매자번호'별로 구매건수가 3건 이상인 것만 구하시오.

SELECT custid AS '구매자번호', SUM(saleprice) AS '구입가격의 합계'
FROM orders
GROUP BY custid
HAVING COUNT(custid) >= 3;
(그룹 내의 조건을 사용할 때는 HAVING를 사용.)

19. orders 테이블에서 saleprice가 10000~15000 사이의 자료를 대상으로 custid별 'custid', 'saleprice의 합계', '거래건수'를 출력하시오. 
단, 거래건수가 2건 이상인 자료를 대상으로 하시오.

SELECT custid, SUM(saleprice) AS '합계', COUNT(*) AS '거래건수'
FROM orders
WHERE saleprice BETWEEN 10000 AND 15000
GROUP BY custid
HAVING COUNT(custid) >= 2;

20. book 테이블에서 bookname, publisher, price를 publisher의 오름차순으로 정렬하여 출력하시오.

SELECT bookname, publisher, price
FROM book
ORDER BY publisher ASC, bookname DESC;

21. orders 테이블에서 custid가 3이하인 고객중 2회이상 거래된 고객을 대상으로 custid별 custid, saleprice의 합계, 판매개수를 custid의 내림차순으로 정렬하여 출력하시오.

SELECT custid, SUM(saleprice) AS '가격합계', COUNT(*) AS '판매개수' 
FROM orders
WHERE custid <= 3
GROUP BY custid
HAVING COUNT(*) >= 2
ORDER BY custid DESC;

22. book과 orders를 대상으로 bookid가 일치하는 자료들중 saleprice가 20000이상인 bookid, bookname, saleprice, orderdate를 출력하시오.

select book.bookid, book.bookname, orders.saleprice, orders.orderdate
from book, orders
where book.bookid = orders.bookid AND orders.saleprice >= 20000;

select book.bookid, bookname, saleprice, orderdate
from book inner join orders on book.bookid=orders.bookid
where orders.saleprice >= 20000;

23. book과 orders를 대상으로 book은 모든 데이터를 다 가져오고 orders는 book과 일치하는 bookid, bookname, saleprice, orderdate를 출력하시오.

select book.bookid, bookname, saleprice, orderdate
from book left outer join orders on book.bookid=orders.bookid;

24. book과 orders를 대상으로 orders은 모든 데이터를 다 가져오고 orders는 book과 일치하는 bookid, bookname, saleprice, orderdate를 출력하시오.

select book.bookid, book.bookname, orders.saleprice, orders.orderdate
from orders left outer join book on book.bookid = orders.bookid;

25. 23,24 book, orders의 양쪽 모든 데이터를 출력.

select book.bookid, bookname, saleprice, orderdate
from book left outer join orders on book.bookid=orders.bookid
union
select book.bookid, book.bookname, orders.saleprice, orders.orderdate
from orders left outer join book on book.bookid = orders.bookid;

26. book.bookid와 customer.phone가 정확하게 일치하는 모든 자료를 출력하시오.

select *
from book left join customer on book.bookid = customer.phone
union
select *
from customer left join book on book.bookid = customer.phone;

27. book 테이블에서 평균 price이상인 도서정보를 출력하시오.

select *
from book
where price >= (
	select avg(price)
    from book
);

28. book 테이블에서 price가 가장 큰 도서명을 출력하시오.

select bookname
from book
where price = (
	select max(price)
    from book
);

29. orders.saleprice가 가장 큰 책의 book.publisher를 출력하시오.

select book.publisher
from book join orders on book.bookid = orders.bookid
where orders.saleprice = (
	select max(saleprice)
    from orders
);


-- 다른 테이블에서 최대 필드값을 2중 비교하기--
select name, phone
from customer
where custid = (
	select custid
    from orders
    where saleprice = (
		select max(saleprice)
        from orders
    )
);

30. 튜플변수 테이블의 이름을 변경
     book => data1, orders => data2 바꿔서
     bookid 일치하는 모든 자료를 출력

select *
from book data1 join orders data2 on data1.bookid = data2.bookid;


